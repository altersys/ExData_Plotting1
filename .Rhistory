a <- available.packages()
head(rownames((a),3))
head(rownames((a),1))
head(rownames((a),0))
head(rownames((a),5))
head(rownames((a),1))
head(rownames((a),0))
head(rownames((a),3))
head(rownames((a),1))
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
install.packages("slidify")
head(rownames((a),3))
a <- available.packages()
head(rownames((a),3))
head(rownames((a),5))
is.intalled('slidify')
install.packages("kernsmooth")
y
install.packages("KernSmooth")
head(rownames((a),5))
a <- available.packages()
head(rownames((a),5))
head(rownames((a),3))
head(rownames((k),3))
head(rownames((K),3))
head(rownames((a),3))
library(KernSmooth)
read.csv("plan1")
ls()
dir()
read.csv("plan1.csv")
x <- read.csv("plan1.csv")
x
x
unclass(x)
typeof(x)
x <- read.csv("plan1.csv")
x
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y = x -3
y <- x -3
y
z <- c(1.1,9,3.14)
?
;
?c
z
c(z, 555)
c(z, 555,z)
z*2+100
mysqrt <- sqrt(z-1)
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/mysqrt
my_div <- z/my_sqrt
my_div
c(1,2,3,4) + c (0,10)
c(1,2,3,4) + c (0,10,100)
c(1,2,3,4) + c (0,10,1000)
z*2+1000
my_
my_div
q()
con <- url("ya.ru")
con <- url("http://ya.ru")
con
data.read.csv(con)
data.readcsv(con)
data <- read.csv(con)
close(con)
con.close
x <- readLines(con)
con
con <- url("ya.ru")
con <- url("http://ya.ru")
x <- readLines(con)
x
head(x)
con <- url("http://ya.ru", "r")
x <- readLines(con)
head(x)
x <- c("a", "b", "c", "d", "a" )
x[1]
x[1:3]
x[x > "a"]
y <- c(1:10)
y
y[y > 2]
y[y < 2]
y[y*2 < 2]
y[y+2 < 2]
y[y+2 < 4]
y[y+2 < 9]
y[y*2 < 9]
u <- x > "a"
u
i <- x > 4
i
i <- y > 4
i
y[u]
y[i]
x <- list(foo = 1:4, bar = 0.6)
x[1]
x[[1]]
x$foo
$foo
x$foo
x[c(1,2)]
x[c(1:2)]
x$foo
x$foo[1]
x$foo[3]
x <- matrix(1:6, 2 ,3)
x
x[1][2]
x[1,2]
x[1,3]
x[1,3, drop = false]
x[1,3, drop = FALSE]
x[1,, drop = FALSE]
x[1,]
x <- list(aardvark = 1:5)
x$a
x$ar
x$aa
x$aar
x[[a]]
x[["a"]]
x[["a", exact = falce]]
x[["a", exact = FALSE]]
x <- c(1, 2, NA, 4, NA, 5 )
bad <- is.na(x)
x![bad]
x[!bad]
x[!is.na{x}]
x[!is.na(x)]
x[complete.cases(x)]
x
y <- c(1,2,3,NA,NA)
y
z <- c(NA,2, NA, NA)
complete.cases(x,y,z)
complete.cases(x,y)
complete.cases(x,y)
x
y
z <- c(NA,2, NA, NA, NA)
y <- c(1,2,3,NA,NA, NA)
complete.cases(x,y\)
complete.cases(x,y)
complete.cases(x,y,z)
x
y
z
z <- c(NA,2, NA, NA, NA, NA)
complete.cases(x,y,z)
x <- 1:9
y <- 1:9
x
y
matrix(x)
x <- matrix(1,9)
x
y <- matrix(9,1)
y
y <- matrix(ncol = 9, nrow =1)
y <- matrix(ncol = 9, nrow = 1)
y
y <- matrix(1:9, ncol = 9, nrow =1)
y
x <- matrix(1:9, ncol = 1, nrow =9)
x
x*y
x%*%y
x%*%y
z <- matrix (1:9, nrow=9, ncol = 1)
y*z
x*z
q()
t <- read.table("coursera/hw1_data.csv", header = TRUE)
t <- read.table("coursera/hw1_data.csv", header = TRUE, sep = ",")
t
length(t)
tail(t,2)
t[[47]]
t[47]
t$Ozone[47]
is.na(t$Ozone)
x <- is.na(t$Ozone)
x
length(x)
length(x[x == TRUE])
t$Ozone
t$Ozone[!is.na(t$Ozone)]
mean(t$Ozone[!is.na(t$Ozone)])
mean(t$Solar.R[!is.na(t$Ozone)])
t$Ozone[!is.na(t$Ozone)]
t$Ozone[!is.na(t$Ozone) & t$Ozone > 31]
t$Ozone[!is.na(t$Ozone) & t$Ozone > 31 & Temp > 90]
t$Ozone[!is.na(t$Ozone) & t$Ozone > 31 & t$Temp > 90]
t$Solar[!is.na(t$Ozone) & t$Ozone > 31 & t$Temp > 90]
t$Solar.R[!is.na(t$Ozone) & t$Ozone > 31 & t$Temp > 90]
mean(t$Solar.R[!is.na(t$Ozone) & t$Ozone > 31 & t$Temp > 90])
t$Temp[t$Month ==6]
mean(t$Temp[t$Month ==6])
t$Ozone[t$Month ==5])
t$Ozone[t$Month ==5]
t$Ozone[!is.na(t$Ozone) & t$Ozone[t$Month ==5]]
t$Ozone[t$Month ==5])
t$Ozone[t$Month ==5]
x <- t$Ozone[t$Month ==5]
x
x <- c(4, "a", TRUE)?
x
x <- c(4, "a", TRUE)
x
typeof(x)
mean(t$Temp[t$Month ==6])
class(x)
q()
rm(list=ls())
swirl
library(swirl)
swirl()
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
my_mean(c(4,5,10))
submit()
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1},6)
evaluate(function(x){x[1]},c(8, 4, 0))
evaluate(function(x){x[length(x)]},c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("hello world")
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
I %p% love %p% R
"I" %p% "love" %p% "R"
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
YEAR-MONTH-DAY
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
?str
t2$min
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
strptime()
t3<-strptime(t2)
t3<-strptime(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sample(())
sample()
?sample()
sample(x,100)
sample(x,100,replace = T)
sample(10)
sample(10,10)
sample(1:10)
sample(1:100,10)
x <- 1:12
sample(x)
sample()
?sample
sample(1:6,4, replace = T)
sample(1:6,4, replace = TRUE)
sample(1:6,4, replace = FALEC)
sample(1:6,4, replace = FALSE)
sample(1:6,4, replace = TRUE)
sample(1:20,10, replace = FALSE)
sample(1:20,10)
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace = TRUE)
sample(c(0,1),100,replace = TRUE, prob = c(0.3, 0.7))
flips <- sample(c(0,1),100,replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
?rpios
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
?replicate
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed, cars$dist)
plot(cars$dist, cars$speed)
plot(cars$dist, cars$speed,ylab = "Speed")
plot(cars$dist, cars$speed,xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed")
plot(cars$speed, cars$dist, xlab = "Speed",ylab = "Stopping Distance")
plot(cars$speed, cars$dist, ylab = "Stopping Distance")
plot(cars$speed, cars$dist, xlab = "Speed",ylab = "Stopping Distance")
plot(cars$speed, cars$dist, main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, main = "My Plot",)
plot(cars, sub = "My Plot Subtitle")
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
mtcars
data(mtcars)
?data()
?boxplot
boxplot(mpg ~ cyl, cars)
boxplot(mpg ~ cyl, mtcars)
hist()
hist(mtcars$mpg)
?rpois
data(mtcars)
mtcars
rm(list=ls())
setwd("coursera/ExData_Plotting1/")
dev.off()
dev.off()
require(data.table)
# Setting locale for english rather than local(Russian or other) weekdays
Sys.setlocale(category = "LC_ALL", locale = "english")
